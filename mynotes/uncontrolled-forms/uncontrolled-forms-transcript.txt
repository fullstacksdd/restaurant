We have briefly examine uncontrolled forms. In this exercise, we will set up a simple uncontrolled form in our react application and in the process, learn how we can set up an uncontrolled form. To get started with this exercise, in our project, go to the header component. In the header component, we are first going to set up a modal which will be displayed on top of our page and this modal will contain a login form that we will set up as an uncontrolled form. So, first step we will create a modal using the reactstrap modal component. So, going into our header component, let me pull in the model related components from reactstrap. So, we'll pull in button, modal, ModalHeader, and ModalBody from reactstrap. So, once we pull that in, then what we can do is to set up our modal in our application. To set up the modal in our application, let's go into the code here and after the Jumbotron, I'm going to introduce the modal here. So, we'll say, modal and this modal will be controlled from our react component and we'll see how they can set up this modal and the modal itself will contain a ModalHeader, and would contain the title as login, and then the ModalBody which later on we will introduce the form into the ModalBody. So with this, the basic modal structure is in place but for this model to be shown and hidden, we need to set up something within our code to trigger this modal. So, to do this, we will set up another value within the state called isModelOpen and initially will be false. This boolean variable will track the state of whether the modal is open or not. To toggle this modal, we will implement a function here called toggleModal, and we need to tie this toggleModal in as here. So, just like we have the toggleNav, we'll say toggleModal, and toggleModal bind this. So with that, our modal is set up. Now, within the toggleModal, what do you think we are going to be doing? We'll be toggling the modal just like we toggle the nav here. So, we'll just use that and then we'll just say isModalOpen, say isModalOpen, this state isModalOpen. So, we'll be toggling the value of the isModalOpen whenever the toggleModal is invoked. Now, where is this toggleModel going to be invoked? So, to set this up to control our modal, let's go back to the modal that we have just introduced and then within the modal, we'll have that isOpen attribute which we have to tie to this state, isModalOpen as you would expect, and then we'll say, toggle is this toggleModal and the same thing also has to be put into the ModalHeaders here. With this, our modal is set up in our header component. Now, how do we invoke this modal? To invoke this modal, we will add in a button into our header here into the navbar here. So, inside this navbar, I'm going to go in and introduce another Nav here with the className as ml-auto. So, this way, we will give the left margin as much as possible for this navbar. So, we'll push whatever is inside those navbar to the right edge of our navbar. So, inside this nav, I'm going to create a NavItem. So, this is another navbar that is a nav element that is included inside the navbar. So, here we'll say, button, outline button, onClick, when this is clicked will just invoke the toggleModal, because that's what we want this button to do it. We want this button to be able to show and hide the modal here. So, we'll let that toggle the modal there and then in here we'll say, introduce a font or some icon there. So, we'll say span className fa fa-sign-in. So, this is a sign-in font or some icon here. So, we'll say, fa-sign-in and we'll say Login. So, with that, let's save the changes and go and take a look at our page. Going to our application, you now see that in the navbar to the right edge, you see this button. So, this is what we just introduced. So when we click on the button, you would see the modal pop up on the screen. The modal has this header title as login, and the modal body is currently empty, and the modal behaves exactly like how we expect modals to behave. That's it. To our next step is of course to set up the uncontrolled form inside the modal. So, to set up the uncontrolled form, let's go back to the header component. Going back to the header component, I'm going to set up the uncontrolled form inside the ModalBody. So, we'll say Form onSubmit this handleLogin. So, what that means is that I'm going to implement this handle login function a little bit later and then close the form there. Now, what do we do inside this handle login form? So, we'll say, FormGroup. We have done this already so, they should be familiar to you how we set up forms using the reactstrap form elements, FormGroup, Label htmlFor username. Login form usually contains a username and password. So, you'll say username label, and we'll say, input type text, id username, name, username, and that's it. That's the username part there, let's set up the password part here, right below it and then we'll say, FormGroup label for, htmlFor password. So, the input type is, so if you had set it up as password, the password will not show. Instead you will see, the password will be hidden and you'll see only dots in the input box there. So, this is the password, then you will set up a checkbox here. Inside the checkbox. So, usually, you would find a checkbox in your form saying, Remember me or something like that. So, that's the kind that I'm setting up here <Input type= "checkbox" name,= "remember"/> Remember me. And then finally, we'll set up a <Button of the type= "submit", className should be "bg-primary". So, a blue colored button here and say, Login Button. Actually I can use color primary for this, Login Button. We'll have to import the form related stuff from our reactstrap. So we'll say, Form, FormGroup, Input, Button. What else did we use? So, we used Form, FormGroup, Input, Button and Label. So, let's import Label also from 'reactstrap'. We have already imported the button, so don't need that, save the changes. And going back to our browser and we click on the Login button. Now, you see the model pop up, with the Username, Password and the Login form being displayed here. So, you should be able to type in your username and password and click on the login, go submit your login information. Since we are going to implement this form as an uncontrolled form, so here I will implement this method called handleLogin which receives the event as the parameter here. And also let me tie the handleLogin in here. So, we'll say handleLogin and bind that there. And within the handleLogin event, what we will do is we'll say this.toggleModal. So, we'll close the Modal at this point, once the form is submitted and then we'll say alert Username, this.username.value. I'm just popping up this other box with the values that the user entered on the form, just so that we can verify that the form has been submitted. Password, let me give a space there, Remember. So, you see that when retrieving the values directly from the DOM and then using that here and then alerting, and then we'll see event.preventDefault. Now, how do we retrieve the values from the form there? So, to do that we need to get the ref, to the form, references to the form. So, going into the form for each of the inputs. Now, since we are using this inside reactstrap. Reactstrap already uses ref for something else. So, in reactstrap components input we should use innerRef, instead of Ref here, innerRef here. So, we'll say innerRef equal to input this.username equal to input. So, that is how you retrieve the information from inside your input field. Similarly for the password, innerRef this.password innerRef and for the remember me also, this.remember is input. With this change, so notice how we're extracting the Reference from the input boxes from the DOM where the values stored and then making them available to our react application. And then so here, within the how I handle Login I'm able to pull in the values like this.username.value, password.value, remember.checked, and then be able to see those values. Let's save the changes and then go and take a look at our application. Back to our application. Let's open the Login form and type in some values into the form and then submit. And you immediately see the alert box pop up with the information here, the Username, Password. So, what this means is that my React application is able to obtain information, whatever I have typed in the form and so I'm able to see that. Similarly, if I don't click on the button then remember will be false and the Username and Password information will be shown here. You could even carry out form validation if you choose to, although I don't explicitly illustrate that in this course, but that is left as an exercise for you to think about. With this, we have demonstrated how we can make use of uncontrolled forms within our React application. This is a good time for you to do a Git commit with the message uncontrolled forms.